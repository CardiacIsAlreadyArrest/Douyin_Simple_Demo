// Code generated by hertz generator.

package publish

import (
	"context"
	"github.com/Yra-A/Douyin_Simple_Demo/cmd/api/biz/handler"
	hpublish "github.com/Yra-A/Douyin_Simple_Demo/cmd/api/biz/model/publish"
	"github.com/Yra-A/Douyin_Simple_Demo/cmd/api/rpc"
	kpublish "github.com/Yra-A/Douyin_Simple_Demo/kitex_gen/publish"
	"github.com/Yra-A/Douyin_Simple_Demo/pkg/constants"
	"github.com/Yra-A/Douyin_Simple_Demo/pkg/errno"
	"github.com/Yra-A/Douyin_Simple_Demo/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var req hpublish.PublishActionRequest

	if err := utils.ParsePubActionRequest(&req, c); err != nil {
		handler.BadResponse(c, errno.ConvertErr(err))
		return
	}
	if int64(len(req.Data)) > constants.MaxVideoSize {
		handler.BadResponse(c, errno.VideoExceedMaxSizeErr)
		return
	}
	if len(req.Title) == 0 || len(req.Data) == 0 {
		handler.BadResponse(c, errno.ParamErr)
		return
	}

	if user_id, exist := c.Get("current_user_id"); exist {
		req.UserID = user_id.(int64)
	} else {
		handler.BadResponse(c, errno.AuthorizationFailedErr)
		return
	}

	kresp, err := rpc.PublishAction(context.Background(), &kpublish.PublishActionRequest{
		Token:  req.Token,
		Data:   req.Data,
		Title:  req.Title,
		UserId: req.UserID,
	})
	if err != nil {
		handler.BadResponse(c, errno.ConvertErr(err))
		return
	}

	resp := &hpublish.PublishActionResponse{
		StatusCode: kresp.StatusCode,
		StatusMsg:  kresp.StatusMsg,
	}

	handler.SendResponse(c, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hpublish.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if user_id, exist := c.Get("current_user_id"); exist {
		req.UserID = user_id.(int64)
	} else {
		handler.BadResponse(c, errno.AuthorizationFailedErr)
		return
	}

	kresp, err := rpc.PublishList(context.Background(), &kpublish.PublishListRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := &hpublish.PublishListResponse{
		StatusCode: kresp.StatusCode,
		StatusMsg:  kresp.StatusMsg,
	}

	for _, v := range kresp.VideoList {
		author := &hpublish.User{
			ID:              v.Author.Id,
			Name:            v.Author.Name,
			FollowCount:     v.Author.FollowCount,
			FollowerCount:   v.Author.FollowerCount,
			IsFollow:        v.Author.IsFollow,
			Avatar:          v.Author.Avatar,
			BackgroundImage: v.Author.BackgroundImage,
			Signature:       v.Author.Signature,
			TotalFavorited:  v.Author.TotalFavorited,
			WorkCount:       v.Author.WorkCount,
			FavoriteCount:   v.Author.FavoriteCount,
		}
		resp.VideoList = append(resp.VideoList, &hpublish.Video{
			ID:            v.Id,
			Author:        author,
			PlayURL:       v.PlayUrl,
			CoverURL:      v.CoverUrl,
			FavoriteCount: v.FavoriteCount,
			CommentCount:  v.CommentCount,
			IsFavorite:    v.IsFavorite,
			Title:         v.Title,
		})
	}

	handler.SendResponse(c, resp)
}
