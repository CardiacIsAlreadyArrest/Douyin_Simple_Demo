// Code generated by hertz generator.

package favorite

import (
	"context"
	"encoding/json"

	"log"

	hfavorite "github.com/Yra-A/Douyin_Simple_Demo/cmd/api/biz/model/favorite"
	mjwt "github.com/Yra-A/Douyin_Simple_Demo/cmd/api/biz/mw/jwt"
	"github.com/Yra-A/Douyin_Simple_Demo/cmd/api/rpc"
	kfavorite "github.com/Yra-A/Douyin_Simple_Demo/kitex_gen/favorite"
	"github.com/Yra-A/Douyin_Simple_Demo/pkg/constants"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/jwt"
)

// import (
//
//	"context"
//
//	"github.com/cloudwego/hertz/pkg/app"
//	"github.com/cloudwego/hertz/pkg/protocol/consts"
//
// )
// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hfavorite.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// resp := new(favorite.FavoriteActionResponse)
	// v, _ := c.Get(constants.IdentityKey)
	resp, err := rpc.FavoriteAction(context.Background(), &kfavorite.FavoriteActionRequest{
		UserId:     req.UserID,
		VideoId:    req.VideoID,
		ActionType: req.ActionType,
		Token:      req.Token,
	})
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hfavorite.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	uid := int64(0)
	if token, err := mjwt.JwtMiddleware.ParseTokenString(req.Token); err == nil {
		claims := jwt.ExtractClaimsFromToken(token)
		userid, _ := claims[constants.IdentityKey].(json.Number).Int64()
		uid = userid
	}
	log.Println("[ypx debug] favorite favorite userid", uid)
	// v, _ := c.Get(constants.IdentityKey)
	resp, err := rpc.FavoriteList(context.Background(), &kfavorite.FavoriteListRequest{
		UserId: uid,
		Token:  req.Token,
	})
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// FavoriteCount .
// @router /douyin/favorite/count/ [GET]
func FavoriteCount(ctx context.Context, c *app.RequestContext) {
	var err error
	var req hfavorite.FavoriteCountRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, _ := rpc.FavoriteCount(context.Background(), &kfavorite.FavoriteCountRequest{VideoId: req.VideoID})

	c.JSON(consts.StatusOK, resp)
}
