// Code generated by Kitex v0.6.2. DO NOT EDIT.

package relationservice

import (
	"context"
	relation "github.com/Yra-A/Douyin_Simple_Demo/kitex_gen/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":        kitex.NewMethodInfo(relationActionHandler, newRelationServiceRelationActionArgs, newRelationServiceRelationActionResult, false),
		"RelationFollowList":    kitex.NewMethodInfo(relationFollowListHandler, newRelationServiceRelationFollowListArgs, newRelationServiceRelationFollowListResult, false),
		"RelationFollowerList":  kitex.NewMethodInfo(relationFollowerListHandler, newRelationServiceRelationFollowerListArgs, newRelationServiceRelationFollowerListResult, false),
		"RelationFriendList":    kitex.NewMethodInfo(relationFriendListHandler, newRelationServiceRelationFriendListArgs, newRelationServiceRelationFriendListResult, false),
		"RelationFollowCount":   kitex.NewMethodInfo(relationFollowCountHandler, newRelationServiceRelationFollowCountArgs, newRelationServiceRelationFollowCountResult, false),
		"RelationFollowerCount": kitex.NewMethodInfo(relationFollowerCountHandler, newRelationServiceRelationFollowerCountArgs, newRelationServiceRelationFollowerCountResult, false),
		"RelationIsFollow":      kitex.NewMethodInfo(relationIsFollowHandler, newRelationServiceRelationIsFollowArgs, newRelationServiceRelationIsFollowResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationActionArgs)
	realResult := result.(*relation.RelationServiceRelationActionResult)
	success, err := handler.(relation.RelationService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationActionArgs() interface{} {
	return relation.NewRelationServiceRelationActionArgs()
}

func newRelationServiceRelationActionResult() interface{} {
	return relation.NewRelationServiceRelationActionResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFollowListArgs)
	realResult := result.(*relation.RelationServiceRelationFollowListResult)
	success, err := handler.(relation.RelationService).RelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFollowListArgs() interface{} {
	return relation.NewRelationServiceRelationFollowListArgs()
}

func newRelationServiceRelationFollowListResult() interface{} {
	return relation.NewRelationServiceRelationFollowListResult()
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFollowerListArgs)
	realResult := result.(*relation.RelationServiceRelationFollowerListResult)
	success, err := handler.(relation.RelationService).RelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFollowerListArgs() interface{} {
	return relation.NewRelationServiceRelationFollowerListArgs()
}

func newRelationServiceRelationFollowerListResult() interface{} {
	return relation.NewRelationServiceRelationFollowerListResult()
}

func relationFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFriendListArgs)
	realResult := result.(*relation.RelationServiceRelationFriendListResult)
	success, err := handler.(relation.RelationService).RelationFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFriendListArgs() interface{} {
	return relation.NewRelationServiceRelationFriendListArgs()
}

func newRelationServiceRelationFriendListResult() interface{} {
	return relation.NewRelationServiceRelationFriendListResult()
}

func relationFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFollowCountArgs)
	realResult := result.(*relation.RelationServiceRelationFollowCountResult)
	success, err := handler.(relation.RelationService).RelationFollowCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFollowCountArgs() interface{} {
	return relation.NewRelationServiceRelationFollowCountArgs()
}

func newRelationServiceRelationFollowCountResult() interface{} {
	return relation.NewRelationServiceRelationFollowCountResult()
}

func relationFollowerCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationFollowerCountArgs)
	realResult := result.(*relation.RelationServiceRelationFollowerCountResult)
	success, err := handler.(relation.RelationService).RelationFollowerCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationFollowerCountArgs() interface{} {
	return relation.NewRelationServiceRelationFollowerCountArgs()
}

func newRelationServiceRelationFollowerCountResult() interface{} {
	return relation.NewRelationServiceRelationFollowerCountResult()
}

func relationIsFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationIsFollowArgs)
	realResult := result.(*relation.RelationServiceRelationIsFollowResult)
	success, err := handler.(relation.RelationService).RelationIsFollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationIsFollowArgs() interface{} {
	return relation.NewRelationServiceRelationIsFollowArgs()
}

func newRelationServiceRelationIsFollowResult() interface{} {
	return relation.NewRelationServiceRelationIsFollowResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args relation.RelationServiceRelationActionArgs
	_args.Req = req
	var _result relation.RelationServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, req *relation.RelationFollowListRequest) (r *relation.RelationFollowListResponse, err error) {
	var _args relation.RelationServiceRelationFollowListArgs
	_args.Req = req
	var _result relation.RelationServiceRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, req *relation.RelationFollowerListRequest) (r *relation.RelationFollowerListResponse, err error) {
	var _args relation.RelationServiceRelationFollowerListArgs
	_args.Req = req
	var _result relation.RelationServiceRelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFriendList(ctx context.Context, req *relation.RelationFriendListRequest) (r *relation.RelationFriendListResponse, err error) {
	var _args relation.RelationServiceRelationFriendListArgs
	_args.Req = req
	var _result relation.RelationServiceRelationFriendListResult
	if err = p.c.Call(ctx, "RelationFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowCount(ctx context.Context, req *relation.RelationFollowCountRequest) (r *relation.RelationFollowCountResponse, err error) {
	var _args relation.RelationServiceRelationFollowCountArgs
	_args.Req = req
	var _result relation.RelationServiceRelationFollowCountResult
	if err = p.c.Call(ctx, "RelationFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerCount(ctx context.Context, req *relation.RelationFollowerCountRequest) (r *relation.RelationFollowerCountResponse, err error) {
	var _args relation.RelationServiceRelationFollowerCountArgs
	_args.Req = req
	var _result relation.RelationServiceRelationFollowerCountResult
	if err = p.c.Call(ctx, "RelationFollowerCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationIsFollow(ctx context.Context, req *relation.RelationIsFollowRequest) (r *relation.RelationIsFollowResponse, err error) {
	var _args relation.RelationServiceRelationIsFollowArgs
	_args.Req = req
	var _result relation.RelationServiceRelationIsFollowResult
	if err = p.c.Call(ctx, "RelationIsFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
